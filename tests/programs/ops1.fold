# !, &&, ||
assert_equal(!0, 1);
assert_equal(!1, 0);
assert_equal(!2, 0);
assert_equal(!3, 0);
assert_equal(!4, 0);
assert_equal(!5, 0);

assert_equal(0 || 0, 0);
assert_equal(1 || 0, 1);
assert_equal(0 || 1, 1);
assert_equal(43 || 0, 1);
assert_equal(-5 || 0xffff, 1);

assert_equal(0 && 0, 0);
assert_equal(1 && 0, 0);
assert_equal(0 && 1, 0);
assert_equal(43 && 0, 0);
assert_equal(-5 && 0xffff, 1);
assert_equal(43 && 1, 1);

# comparison
assert_equal(1 == 1, 1);
assert_equal(0 == 5, 0);
assert_equal(2 == 3, 0);
assert_equal(7 - 8 == -1, 1);
assert_equal(1 != 1, 0);
assert_equal(0 != 5, 1);
assert_equal(2 != 3, 1);
assert_equal(7 - 8 != -1, 0);

assert_equal(-3 >= -3, 1);
assert_equal(-3 <= -3, 1);
assert_equal(5 >= 5, 1);
assert_equal(5 <= 5, 1);
assert_equal(3 >= 4, 0);
assert_equal(3 <= 4, 1);
assert_equal(4 >= 3, 1);
assert_equal(4 <= 3, 0);
assert_equal(-3 >= -4, 1);
assert_equal(-3 <= -4, 0);
assert_equal(-4 >= -3, 0);
assert_equal(-4 <= -3, 1);

assert_equal(-3 > -3, 0);
assert_equal(-3 < -3, 0);
assert_equal(5 > 5, 0);
assert_equal(5 < 5, 0);
assert_equal(3 > 4, 0);
assert_equal(3 < 4, 1);
assert_equal(4 > 3, 1);
assert_equal(4 < 3, 0);
assert_equal(-3 > -4, 1);
assert_equal(-3 < -4, 0);
assert_equal(-4 > -3, 0);
assert_equal(-4 < -3, 1);

# shift operations
assert_equal(1 << 0, 1);
assert_equal(1 << 1, 2);
assert_equal(1 << 3, 8);
assert_equal(3 << 2, 12);
assert_equal(-5 << 3, -40);
assert_equal(9 >> 1, 4);
assert_equal(-40 >> 3, -5);

# unary operations
assert_equal(!0, 1);
assert_equal(!!0, 0);
assert_equal(!1, 0);
assert_equal(!!1, 1);
assert_equal(!!2, 1);

assert_equal(-0, 0);
assert_equal(-(5), -5);
assert_equal(-(-5), 5);
assert_equal(-(-(-5)), -5);

assert_equal(~7, -8);
assert_equal(~(-3), 2);
assert_equal(~~(-5), -5);
assert_equal(~~7, 7);

# division, modulo
assert_equal(0 // 3, 0);
assert_equal(1 // 3, 0);
assert_equal(2 // 3, 0);
assert_equal(3 // 3, 1);
assert_equal(4 // 3, 1);
assert_equal(6 // 3, 2);
assert_equal(-1 // 3, -1);
assert_equal(-2 // 3, -1);
assert_equal(-3 // 3, -1);
assert_equal(-4 // 3, -2);
assert_equal(-5 // 3, -2);

assert_equal(1 // -1, -1);

assert_equal(0 // -3, 0);
assert_equal(2 // -3, -1);
assert_equal(3 // -3, -1);
assert_equal(6 // -3, -2);
assert_equal(-1 // -3, 0);
assert_equal(-2 // -3, 0);
assert_equal(-3 // -3, 1);
assert_equal(-4 // -3, 1);

assert_equal(0 % 3, 0);
assert_equal(1 % 3, 1);
assert_equal(2 % 3, 2);
assert_equal(3 % 3, 0);
assert_equal(4 % 3, 1);
assert_equal(6 % 3, 0);
assert_equal(-1 % 3, 2);
assert_equal(-2 % 3, 1);
assert_equal(-3 % 3, 0);
assert_equal(-4 % 3, 2);
assert_equal(-5 % 3, 1);

assert_equal(1 % -1, 0);

assert_equal(0 % -3, 0);
assert_equal(2 % -3, -1);
assert_equal(3 % -3, 0);
assert_equal(6 % -3, 0);
assert_equal(-1 % -3, -1);
assert_equal(-2 % -3, -2);
assert_equal(-3 % -3, 0);
assert_equal(-4 % -3, -1);

# ctz
assert_equal(ctz(1), 0);
assert_equal(ctz(2), 1);
assert_equal(ctz(4), 2);
assert_equal(ctz(8), 3);
assert_equal(ctz(16), 4);
assert_equal(ctz(32), 5);

assert_equal(ctz(5), 0);
assert_equal(ctz(6), 1);
assert_equal(ctz(7), 0);
assert_equal(ctz(8), 3);
assert_equal(ctz(9), 0);
assert_equal(ctz(10), 1);

# bitwise binary
assert_equal(11 & 7, 3);
assert_equal(-1 & 6, 6);
assert_equal(-2 & -7, -8);

assert_equal(11 | 7, 15);
assert_equal(-1 | 6, -1);
assert_equal(-3 | -7, -3);

# ternary
assert_equal(0  ? 2 : 3, 3);
assert_equal(1  ? 2 : 3, 2);
assert_equal(3  ? 2 : 3, 2);
assert_equal(-1 ? 2 : 3, 2);
assert_equal(0  ? 2 : -1, -1);
assert_equal(1  ? 2 : -1, 2);
assert_equal(3  ? 2 : -1, 2);
assert_equal(-1 ? 2 : -1, 2);
